import { useState, useEffect, useRef, useCallback } from 'react';
import styled, { keyframes } from 'styled-components';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import SidebarMenu from '../../components/SidebarMenu/SidebarMenu';
import { SearchButton, FilterButton } from '../../components/ui';
import axios from 'axios';

const shimmer = keyframes`
  0% { background-position: -200px 0; }
  100% { background-position: calc(200px + 100%) 0; }
`;

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const pulse = keyframes`
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
`;

const MarketplaceContainer = styled.div`
  padding: 8rem 2rem 4rem;
  max-width: 1440px;
  margin: 0 auto;
  width: 100%;
  box-sizing: border-box;
  padding-top: 96px;
  @media (max-width: 900px) {
    padding-top: 72px;
  }
  @media (max-width: 600px) {
    padding-top: 56px;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
`;

const Header = styled.div`
  margin-bottom: 3rem;
  text-align: center;
  animation: ${fadeIn} 0.6s ease-out;
`;

const Title = styled.h1`
  font-size: 3rem;
  font-weight: 800;
  color: var(--text);
  margin-bottom: 1rem;
  background: linear-gradient(135deg, var(--primary), var(--secondary));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  position: relative;

  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
`;

const Description = styled.p`
  font-size: 1.25rem;
  color: var(--text-light);
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.7;
  padding-bottom: 0.3em;
  word-break: keep-all;
`;

const Controls = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
  flex-wrap: wrap;
  animation: ${fadeIn} 0.6s ease-out 0.2s backwards;

  @media (max-width: 768px) {
    flex-direction: column;
    align-items: stretch;
  }
`;

const SearchBar = styled.div`
  flex: 1;
  max-width: 500px;
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  input {
    flex: 1;
    padding: 1.25rem 1.5rem;
    padding-left: 4rem;
    border: 2px solid var(--border);
    border-radius: var(--radius-xl);
    font-size: 1.1rem;
    transition: var(--transition);
    background: var(--surface);
    box-shadow: var(--shadow-sm);
    color: var(--text);

    &::placeholder {
      color: var(--text-light);
      font-weight: 400;
    }

    &:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 4px rgba(124, 58, 237, 0.1);
      transform: translateY(-1px);
    }

    &:hover {
      border-color: var(--primary);
      box-shadow: var(--shadow);
    }
  }
`;



const SearchIcon = styled.div`
  position: absolute;
  left: 1.25rem;
  top: 50%;
  transform: translateY(-50%);
  width: 24px;
  height: 24px;
  background: linear-gradient(135deg, var(--primary), var(--secondary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
  box-shadow: var(--shadow-sm);

  &::before {
    content: '';
    width: 8px;
    height: 8px;
    border: 2px solid white;
    border-radius: 50%;
    position: relative;
  }

  &::after {
    content: '';
    width: 2px;
    height: 6px;
    background: white;
    position: absolute;
    bottom: 6px;
    right: 6px;
    transform: rotate(45deg);
  }
`;



const SortButton = styled.button`
  padding: 8px 16px;
  background: ${props => props.active ? 'var(--primary)' : 'transparent'};
  color: ${props => props.active ? 'white' : 'var(--text-secondary)'};
  border: 1px solid ${props => props.active ? 'var(--primary)' : 'var(--border-medium)'};
  border-radius: 20px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s ease;
  margin-right: 8px;

  &:hover {
    background: ${props => props.active ? 'var(--primary-dark)' : 'var(--gray-50)'};
    border-color: var(--primary);
    color: ${props => props.active ? 'white' : 'var(--primary)'};
  }
`;

const FilterIcon = styled.div`
  width: 20px;
  height: 20px;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: currentColor;
    border-radius: 2px;
    box-shadow: 0 6px 0 currentColor, 0 12px 0 currentColor;
  }
`;

const FilterPopover = styled.div`
  position: absolute;
  top: 110%;
  right: 0;
  background: white;
  border: 1px solid #E5E7EB;
  border-radius: 1rem;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  padding: 1.5rem;
  z-index: 10;
  min-width: 240px;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  animation: ${fadeIn} 0.3s ease-out;
`;

const FilterSection = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;

const FilterLabel = styled.label`
  font-size: 1rem;
  font-weight: 600;
  color: #1F2937;
  margin-bottom: 0.5rem;
`;

const FilterRadioGroup = styled.div`
  display: flex;
  gap: 1rem;
  flex-direction: row;
  align-items: center;
`;

const FilterRadio = styled.label`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.95rem;
  font-weight: 500;
  color: #374151;
  cursor: pointer;
  padding: 0.5rem 0.75rem;
  border-radius: 0.5rem;
  transition: all 0.2s ease;
  white-space: nowrap;

  &:hover {
    background: #F9FAFB;
  }

  input[type="radio"] {
    width: 1.2rem;
    height: 1.2rem;
    accent-color: var(--primary);
    cursor: pointer;
  }
`;

const FilterSelect = styled.select`
  padding: 0.75rem 1rem;
  border-radius: 0.75rem;
  border: 1.5px solid #E5E7EB;
  font-size: 0.95rem;
  font-weight: 500;
  background: white;
  color: #374151;
  cursor: pointer;
  transition: all 0.2s ease;
  outline: none;

  &:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
  }

  &:hover {
    border-color: #D1D5DB;
  }
`;

const CategoryContainer = styled.div`
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  align-items: center;
  margin-bottom: 2rem;

  @media (max-width: 768px) {
    gap: 0.75rem;
    width: 100%;
    justify-content: flex-start;
  }
`;

const CategorySelect = styled.select`
  padding: 0.75rem 1rem;
  border: 2px solid var(--border);
  border-radius: var(--radius-lg);
  font-size: 1rem;
  background: var(--surface);
  color: var(--text);
  cursor: pointer;
  transition: var(--transition);
  min-width: 150px;
  font-weight: 500;

  &:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);
  }

  &:hover {
    border-color: var(--primary);
  }

  @media (max-width: 768px) {
    min-width: 120px;
    font-size: 0.9rem;
  }
`;

const BookGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 2rem;
  width: 100%;
  animation: ${fadeIn} 0.6s ease-out 0.4s backwards;
  
  @media (max-width: 900px) {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
  }
  @media (max-width: 600px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
`;

const BookCard = styled.div`
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 12px;
  padding: 20px;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(-100%);
    transition: 0.6s;
  }

  &:hover::before {
    transform: translateX(100%);
  }

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-color: var(--primary);
  }
`;

const BookImage = styled.div`
  width: 100%;
  height: 200px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.2rem;
  position: relative;
  overflow: hidden;
  transition: transform 0.3s ease;
  box-shadow: var(--shadow-sm);

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  &:hover::after {
    transform: translateX(100%);
  }
`;

const LikeButton = styled.button`
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.95);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  color: ${props => props.$liked ? '#ff4757' : '#666'};
  box-shadow: var(--shadow);
  z-index: 2;

  &:hover {
    background: white;
    transform: scale(1.1);
    box-shadow: var(--shadow-lg);
  }

  &::before {
    content: ${props => props.$liked ? '"‚ù§Ô∏è"' : '"ü§ç"'};
    font-size: 1.2rem;
  }
`;

const BookInfo = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
`;

const BookTitle = styled.h3`
  margin: 0;
  font-size: 1.1rem;
  font-weight: 700;
  color: var(--text);
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
`;

const BookAuthor = styled.p`
  margin: 0;
  font-size: 0.9rem;
  color: var(--text-light);
  font-weight: 500;
`;

const BookPrice = styled.div`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.5rem;
  flex-wrap: wrap;
`;

const CurrentPrice = styled.span`
  font-size: 1.2rem;
  font-weight: 700;
  color: var(--primary);
`;

const OriginalPrice = styled.span`
  font-size: 0.9rem;
  color: var(--text-light);
  text-decoration: line-through;
`;

const DiscountBadge = styled.span`
  background: #ff6b6b;
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: var(--radius-sm);
  font-size: 0.8rem;
  font-weight: 600;
  margin-left: 0.5rem;
`;

const BookMeta = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid var(--border);
`;

const Condition = styled.span`
  background: ${props => props.$bgColor};
  color: ${props => props.$color};
  padding: 0.25rem 0.75rem;
  border-radius: var(--radius-sm);
  font-size: 0.8rem;
  font-weight: 600;
  border: 1px solid ${props => props.$color}20;
`;

const Location = styled.span`
  color: var(--text-light);
  font-size: 0.8rem;
  display: flex;
  align-items: center;
  gap: 0.25rem;

  &::before {
    content: 'üìç';
  }
`;

const SkeletonCard = styled.div`
  background: white;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: var(--shadow);
  border: 1px solid var(--border);
  animation: ${pulse} 1.5s ease-in-out infinite;
`;

const SkeletonImage = styled.div`
  width: 100%;
  height: 200px;
  background: rgba(240, 240, 240, 0.8);
  animation: ${shimmer} 1.5s infinite;
  border-radius: 12px;
  margin-bottom: 1rem;
`;

const SkeletonText = styled.div`
  height: 1rem;
  background: rgba(240, 240, 240, 0.8);
  animation: ${shimmer} 1.5s infinite;
  border-radius: var(--radius-sm);
  margin-bottom: 0.5rem;

  &:nth-child(2) {
    width: 70%;
  }

  &:nth-child(3) {
    width: 50%;
  }
`;

const LoadingGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 2rem;
  width: 100%;
  
  @media (max-width: 900px) {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
  }
  @media (max-width: 600px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
`;

const SectionContainer = styled.div`
  background: #f8f9fa;
  border-radius: 16px;
  padding: 2rem;
  margin-bottom: 2rem;
`;

const SectionTitle = styled.h2`
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--text);
  margin: 0;
`;

const PopularSectionTitle = styled.h2`
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--text);
  margin: 0;
`;

// Ìï†Ïù∏Ïú®Ïóê Îî∞Î•∏ Ï±Ö ÏÉÅÌÉú Î∞òÌôò Ìï®Ïàò
// ÌòÑÏû¨Îäî Ìï†Ïù∏Ïú®ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ï±Ö ÏÉÅÌÉúÎ•º ÏûêÎèô ÌåêÎã®ÌïòÍ≥† ÏûàÏäµÎãàÎã§:
// - Ìï†Ïù∏Ïú® 20% Ïù¥Ìïò: ÏÉÅ (Ï¢ãÏùÄ ÏÉÅÌÉú)
// - Ìï†Ïù∏Ïú® 21-40%: Ï§ë (Î≥¥ÌÜµ ÏÉÅÌÉú)  
// - Ìï†Ïù∏Ïú® 41% Ïù¥ÏÉÅ: Ìïò (ÎÇÆÏùÄ ÏÉÅÌÉú)
// 
// TODO: Ïã§Ï†ú Íµ¨ÌòÑ ÏãúÏóêÎäî ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë Ï±Ö ÏÉÅÌÉúÎ•º ÌèâÍ∞ÄÌï† Ïàò ÏûàÎèÑÎ°ù 
// Î≥ÑÎèÑÏùò ÏÉÅÌÉú ÏûÖÎ†• ÌïÑÎìúÎ•º Ï†úÍ≥µÌï¥Ïïº Ìï©ÎãàÎã§.
const getBookCondition = (discountRate) => {
  if (discountRate <= 20) return { text: 'ÏÉÅ', color: '#28a745', bgColor: '#d4edda' };
  if (discountRate <= 40) return { text: 'Ï§ë', color: '#ffc107', bgColor: '#fff3cd' };
  return { text: 'Ìïò', color: '#dc3545', bgColor: '#f8d7da' };
};

const CATEGORIES = {
  'Ï†ÑÍ≥µ': {
    'Í≤ΩÏòÅÎåÄÌïô': ['Í≤ΩÏòÅÌïôÎ∂Ä'],
    'Í≥µÍ≥ºÎåÄÌïô': ['Ï†ÑÏûêÏ†ÑÍ∏∞Í≥µÌïôÎ∂Ä', 'Ïã†ÏÜåÏû¨Í≥µÌïôÏ†ÑÍ≥µ', 'ÌôîÌïôÍ≥µÌïôÏ†ÑÍ≥µ', 'Ïª¥Ìì®ÌÑ∞Í≥µÌïôÍ≥º', 'ÏÇ∞ÏóÖÎç∞Ïù¥ÌÑ∞Í≥µÌïôÍ≥º', 'Í∏∞Í≥ÑÏãúÏä§ÌÖúÎîîÏûêÏù∏Í≥µÌïôÍ≥º', 'Í±¥ÏÑ§ÌôòÍ≤ΩÍ≥µÌïôÍ≥º'],
    'Î≤ïÍ≥ºÎåÄÌïô': ['Î≤ïÌïôÎ∂Ä'],
    'ÎØ∏Ïà†ÎåÄÌïô': ['ÎèôÏñëÌïôÍ≥º', 'ÌöåÌôîÍ≥º', 'ÌåêÌôîÍ≥º', 'Ï°∞ÏÜåÍ≥º', 'ÏãúÍ∞ÅÎîîÏûêÏù∏Ï†ÑÍ≥µ', 'ÏÇ∞ÏóÖÎîîÏûêÏù∏Ï†ÑÍ≥µ', 'Í∏àÏÜçÏ°∞ÌòïÎîîÏûêÏù∏Í≥º', 'ÎèÑÏòàÏú†Î¶¨Í≥º', 'Î™©Ï°∞ÌòïÍ∞ÄÍµ¨ÌïôÍ≥º', 'ÏÑ¨Ïú†ÎØ∏Ïà†Ìå®ÏÖòÎîîÏûêÏù∏Í≥º', 'ÏòàÏà†ÌïôÍ≥º'],
    'ÎîîÏûêÏù∏,ÏòàÏà†Í≤ΩÏòÅÌïôÎ∂Ä': ['ÎîîÏûêÏù∏Í≤ΩÏòÅÏ†ÑÍ≥µ', 'ÏòàÏà†Í≤ΩÏòÅÏ†ÑÍ≥µ'],
    'Í≥µÏó∞ÏòàÏà†ÌïôÎ∂Ä': ['ÎÆ§ÏßÄÏª¨Ï†ÑÍ≥µ', 'Ïã§Ïö©ÏùåÏïÖÏ†ÑÍ≥µ'],
    'Í≤ΩÏ†úÌïôÎ∂Ä': ['Í≤ΩÏ†úÌïôÏ†ÑÍ≥µ'],
    'ÏÇ¨Î≤îÎåÄÌïô': ['ÏàòÌïôÍµêÏú°Í≥º', 'Íµ≠Ïñ¥ÍµêÏú°Í≥º', 'ÏòÅÏñ¥ÍµêÏú°Í≥º', 'Ïó≠ÏÇ¨ÍµêÏú°Í≥º', 'ÍµêÏú°ÌïôÍ≥º'],
    'Î¨∏Í≥ºÎåÄÌïô': ['ÏòÅÏñ¥ÏòÅÎ¨∏ÌïôÍ≥º', 'ÎèÖÏñ¥ÎèÖÎ¨∏ÌïôÍ≥º', 'Î∂àÏñ¥Î∂àÎ¨∏ÌïôÍ≥º', 'Íµ≠Ïñ¥Íµ≠Î¨∏ÌïôÍ≥º'],
    'Í±¥Ï∂ïÎèÑÏãúÎåÄÌïô': ['Í±¥Ï∂ïÌïôÏ†ÑÍ≥µ', 'Ïã§ÎÇ¥Í±¥Ï∂ïÌïôÏ†ÑÍ≥µ', 'ÎèÑÏãúÍ≥µÌïôÍ≥º']
  },
  'ÍµêÏñë': {
    'ABEEK ÍµêÏñë': ['ABEEK ÍµêÏñë'],
    'Ïù∏Î¨∏Í≥ÑÏó¥': ['Ïù∏Î¨∏Í≥ÑÏó¥'],
    'ÏòÅÏñ¥Í≥ÑÏó¥': ['ÏòÅÏñ¥Í≥ÑÏó¥'],
    'ÏÇ¨ÌöåÍ≥ÑÏó¥': ['ÏÇ¨ÌöåÍ≥ÑÏó¥'],
    'Ï†ú2Ïô∏Íµ≠Ïñ¥Í≥ÑÏó¥': ['Ï†ú2Ïô∏Íµ≠Ïñ¥Í≥ÑÏó¥'],
    'ÏûêÏó∞Í≥ÑÏó¥': ['ÏûêÏó∞Í≥ÑÏó¥'],
    'ÏòàÏ≤¥Îä•Í≥ÑÏó¥': ['ÏòàÏ≤¥Îä•Í≥ÑÏó¥'],
    'ÍµêÏßÅ': ['ÍµêÏßÅ']
  }
};

const MOCK_BOOKS = [
  {
    id: 1,
    title: 'Ïª¥Ìì®ÌÑ∞Íµ¨Ï°∞Î°†',
    author: 'ÌôçÍ∏∏Îèô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'Ïª¥Ìì®ÌÑ∞Í≥µÌïô' },
    price: 18000,
    status: 'available',
    image: '',
    views: 120,
    createdAt: '2024-06-25',
    likes: 5,
    discountRate: 8,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 2,
    title: 'Ï†ÑÏûêÌöåÎ°ú',
    author: 'Ïù¥Í≥µÌïô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'Ï†ÑÏûêÏ†ÑÍ∏∞Í≥µÌïô' },
    price: 15000,
    status: 'available',
    image: '',
    views: 80,
    createdAt: '2024-06-24',
    likes: 2,
    discountRate: 15,
    location: 'ÍµêÏô∏'
  },
  {
    id: 3,
    title: 'Í≤ΩÏòÅÌïôÏõêÎ°†',
    author: 'ÍπÄÍ≤ΩÏòÅ',
    category: { major: 'Í≤ΩÏòÅÎåÄÌïô', sub: '' },
    price: 12000,
    status: 'available',
    image: '',
    views: 60,
    createdAt: '2024-06-23',
    likes: 10,
    discountRate: 25,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 4,
    title: 'Ïã†ÏÜåÏû¨Í≥µÌïôÍ∞úÎ°†',
    author: 'Î∞ïÏã†ÏÜå',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'Ïã†ÏÜåÏû¨Í≥µÌïô' },
    price: 17000,
    status: 'available',
    image: '',
    views: 30,
    createdAt: '2024-06-22',
    likes: 1,
    discountRate: 40,
    location: 'ÍµêÏô∏'
  },
  {
    id: 5,
    title: 'ÌôîÌïôÍ≥µÌïôÏã§Ìóò',
    author: 'ÏµúÌôîÌïô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'ÌôîÌïôÍ≥µÌïô' },
    price: 20000,
    status: 'available',
    image: '',
    views: 50,
    createdAt: '2024-06-21',
    likes: 3,
    discountRate: 55,
    location: 'ÍµêÎÇ¥'
  }
];

// Ïù∏Í∏∞ ÎèÑÏÑú Îç∞Ïù¥ÌÑ∞ (Ï¢ãÏïÑÏöî ÏàòÏôÄ Ï°∞ÌöåÏàòÎ•º Í∏∞Ï§ÄÏúºÎ°ú Ïù∏Í∏∞ ÎèÑÏÑú ÏÉùÏÑ±)
const POPULAR_BOOKS = [
  {
    id: 101,
    title: 'Ïª¥Ìì®ÌÑ∞Íµ¨Ï°∞Î°†',
    author: 'ÌôçÍ∏∏Îèô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'Ïª¥Ìì®ÌÑ∞Í≥µÌïô' },
    price: 15000,
    status: 'available',
    image: '',
    views: 250,
    createdAt: '2024-06-20',
    likes: 15,
    discountRate: 10,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 102,
    title: 'Ï†ÑÏûêÌöåÎ°ú',
    author: 'Ïù¥Í≥µÌïô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'Ï†ÑÏûêÏ†ÑÍ∏∞Í≥µÌïô' },
    price: 18000,
    status: 'available',
    image: '',
    views: 200,
    createdAt: '2024-06-19',
    likes: 12,
    discountRate: 15,
    location: 'ÍµêÏô∏'
  },
  {
    id: 103,
    title: 'Í≤ΩÏòÅÌïôÏõêÎ°†',
    author: 'ÍπÄÍ≤ΩÏòÅ',
    category: { major: 'Í≤ΩÏòÅÎåÄÌïô', sub: '' },
    price: 12000,
    status: 'available',
    image: '',
    views: 180,
    createdAt: '2024-06-18',
    likes: 10,
    discountRate: 20,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 104,
    title: 'ÎØ∏Ï†ÅÎ∂ÑÌïô',
    author: 'Î∞ïÏàòÌïô',
    category: { major: 'ÏÇ¨Î≤îÎåÄÌïô', sub: 'ÏàòÌïôÍµêÏú°Í≥º' },
    price: 14000,
    status: 'available',
    image: '',
    views: 160,
    createdAt: '2024-06-17',
    likes: 8,
    discountRate: 12,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 105,
    title: 'ÏòÅÏñ¥ÌöåÌôî',
    author: 'ÏµúÏòÅÏñ¥',
    category: { major: 'Î¨∏Í≥ºÎåÄÌïô', sub: 'ÏòÅÏñ¥ÏòÅÎ¨∏ÌïôÍ≥º' },
    price: 10000,
    status: 'available',
    image: '',
    views: 140,
    createdAt: '2024-06-16',
    likes: 7,
    discountRate: 25,
    location: 'ÍµêÏô∏'
  },
  {
    id: 106,
    title: 'ÎîîÏûêÏù∏ÏÇ¨',
    author: 'Ï†ïÎîîÏûêÏù∏',
    category: { major: 'ÎØ∏Ïà†ÎåÄÌïô', sub: 'ÏãúÍ∞ÅÎîîÏûêÏù∏Ï†ÑÍ≥µ' },
    price: 16000,
    status: 'available',
    image: '',
    views: 120,
    createdAt: '2024-06-15',
    likes: 6,
    discountRate: 18,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 107,
    title: 'Í±¥Ï∂ïÌïôÍ∞úÎ°†',
    author: 'ÌïúÍ±¥Ï∂ï',
    category: { major: 'Í±¥Ï∂ïÎèÑÏãúÎåÄÌïô', sub: 'Í±¥Ï∂ïÌïôÏ†ÑÍ≥µ' },
    price: 20000,
    status: 'available',
    image: '',
    views: 110,
    createdAt: '2024-06-14',
    likes: 5,
    discountRate: 8,
    location: 'ÍµêÎÇ¥'
  },
  {
    id: 108,
    title: 'ÌôîÌïôÍ≥µÌïôÏã§Ìóò',
    author: 'ÏµúÌôîÌïô',
    category: { major: 'Í≥µÍ≥ºÎåÄÌïô', sub: 'ÌôîÌïôÍ≥µÌïô' },
    price: 18000,
    status: 'available',
    image: '',
    views: 100,
    createdAt: '2024-06-13',
    likes: 4,
    discountRate: 15,
    location: 'ÍµêÏô∏'
  }
];

const SectionHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
`;

const ViewMoreButton = styled.button`
  padding: 0.75rem 1.5rem;
  background: var(--primary);
  color: white;
  border: none;
  border-radius: 0.75rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 8px rgba(124, 58, 237, 0.2);
  position: relative;
  overflow: hidden;

  &:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(124, 58, 237, 0.3);
  }

  &:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(124, 58, 237, 0.2);
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  &:hover::before {
    left: 100%;
  }
`;

const PopularBooksGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 2rem;
  margin-bottom: 3rem;
  
  @media (max-width: 900px) {
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: 1.5rem;
  }
  @media (max-width: 600px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
`;

const NoResultsMessage = styled.div`
  text-align: center;
  padding: 4rem 2rem;
  color: var(--text-light);
  font-size: 1.1rem;
  background: var(--surface);
  border-radius: var(--radius-lg);
  border: 2px dashed var(--border);
  margin: 2rem 0;
  
  .icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--text-light);
  }
  
  .title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text);
  }
  
  .description {
    color: var(--text-light);
    line-height: 1.6;
  }
`;

const SearchResultsSection = styled.div`
  margin-top: 2rem;
  animation: ${fadeIn} 0.6s ease-out;
`;

const SearchResultsHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid var(--border);
`;

const SearchResultsTitle = styled.h3`
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text);
  margin: 0;
  
  .search-term {
    color: var(--primary);
    font-weight: 800;
  }
  
  .result-count {
    color: var(--text-light);
    font-weight: 400;
    font-size: 1rem;
  }
`;

const BackButton = styled.button`
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: var(--surface);
  border: 2px solid var(--border);
  border-radius: var(--radius-lg);
  color: var(--text);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: var(--transition);
  
  &:hover {
    background: var(--primary);
    color: white;
    border-color: var(--primary);
    transform: translateY(-1px);
  }
  
  .icon {
    font-size: 1.1rem;
  }
`;

const PageWrapper = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  width: 100%;
`;

const Marketplace = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [searchQuery, setSearchQuery] = useState('');
  const [searchInput, setSearchInput] = useState(''); // Ïã§Ï†ú Í≤ÄÏÉâÏñ¥ ÏûÖÎ†•Ïö©
  const [sortBy, setSortBy] = useState('createdAt');
  const [selectedMainCategory, setSelectedMainCategory] = useState('Ï†ÑÏ≤¥');
  const [selectedSubCategory, setSelectedSubCategory] = useState('Ï†ÑÏ≤¥');
  const [selectedDetailCategory, setSelectedDetailCategory] = useState('Ï†ÑÏ≤¥');
  const [isLoading, setIsLoading] = useState(true);
  const [likedBooks, setLikedBooks] = useState(new Set());
  const [activeSubMenu, setActiveSubMenu] = useState('booksale');
  const [filterOpen, setFilterOpen] = useState(false);
  const [locationFilter, setLocationFilter] = useState('Ï†ÑÏ≤¥');
  const [showAllPopularBooks, setShowAllPopularBooks] = useState(false);
  const [showAllRecentBooks, setShowAllRecentBooks] = useState(false);
  const filterRef = useRef();
  const [pendingMainCategory, setPendingMainCategory] = useState('Ï†ÑÏ≤¥');
  const [pendingSubCategory, setPendingSubCategory] = useState('Ï†ÑÏ≤¥');
  const [pendingDetailCategory, setPendingDetailCategory] = useState('Ï†ÑÏ≤¥');

  // API Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû•Ìï† ÏÉÅÌÉú
  const [posts, setPosts] = useState([]);
  const [pageInfo, setPageInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ ÏÉÅÌÉú
  const [searchInput, setSearchInput] = useState('');
  const [sortBy, setSortBy] = useState('createdAt,desc'); // Î∞±ÏóîÎìú APIÏôÄ Ï†ïÎ†¨Í∞í ÎßûÏ∂îÍ∏∞

  // API Ìò∏Ï∂ú Î°úÏßÅ
  const fetchPosts = useCallback(async () => {
    setIsLoading(true);
    try {
      const params = {
        page: 0, // TODO: ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò UI Íµ¨ÌòÑ Ïãú ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏÉÅÌÉúÏôÄ Ïó∞Í≤∞
        size: 12, // Ìïú Î≤àÏóê 12Í∞úÏî©
        sort: sortBy,
        // TODO: Î∞±ÏóîÎìúÏóê Í≤ÄÏÉâ Í∏∞Îä• Ï∂îÍ∞Ä ÌõÑ, Í≤ÄÏÉâÏñ¥ ÌååÎùºÎØ∏ÌÑ∞ÎèÑ Ï∂îÍ∞Ä
        // query: searchInput, 
      };
      const response = await axios.get('/api/posts', { params });
      setPosts(response.data.content);
      setPageInfo({
        totalPages: response.data.totalPages,
        totalElements: response.data.totalElements,
        currentPage: response.data.number,
      });
    } catch (error) {
      console.error("Í≤åÏãúÍ∏Ä Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
    } finally {
      setIsLoading(false);
    }
  }, [sortBy]); // Ï†ïÎ†¨ Í∏∞Ï§ÄÏù¥ Î∞îÎÄî ÎïåÎßàÎã§ APIÎ•º Îã§Ïãú Ìò∏Ï∂ú

  // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ï≤òÏùå ÎßàÏö¥Ìä∏ÎêòÍ±∞ÎÇò, Ï†ïÎ†¨ Í∏∞Ï§ÄÏù¥ Î∞îÎÄî Îïå API Ìò∏Ï∂ú
  useEffect(() => {
    fetchPosts();
  }, [fetchPosts]);

  const handleBookClick = (postId) => {
    navigate(`/posts/${postId}`);
  };

  const handleSubMenuClick = (menu) => {
    setActiveSubMenu(menu);
    switch (menu) {
      case 'booksale':
        navigate('/bookstore/add');
        break;
      case 'wanted':
        navigate('/wanted');
        break;
      case 'mybookstore':
        navigate('/bookstore');
        break;
      case 'chat':
        navigate('/chat');
        break;
      default:
        break;
    }
  };

  const handlePendingMajorChange = (e) => {
    const selectedValue = e.target.value;
    setPendingMainCategory(selectedValue);
    
    if (selectedValue === 'Ï†ÑÏ≤¥') {
      setPendingSubCategory('');
      setPendingDetailCategory('');
    } else {
      const firstSub = Object.keys(CATEGORIES[selectedValue])[0];
      setPendingSubCategory(firstSub);
      setPendingDetailCategory(CATEGORIES[selectedValue][firstSub][0]);
    }
  };

  const handlePendingSubChange = (e) => {
    const selectedValue = e.target.value;
    setPendingSubCategory(selectedValue);
    
    if (selectedValue === '') {
      setPendingDetailCategory('');
    } else {
      setPendingDetailCategory(CATEGORIES[pendingMainCategory][selectedValue][0]);
    }
  };

  const handlePendingDetailChange = (e) => {
    setPendingDetailCategory(e.target.value);
  };

  const handleApplyCategory = () => {
    setSelectedMainCategory(pendingMainCategory);
    setSelectedSubCategory(pendingSubCategory);
    setSelectedDetailCategory(pendingDetailCategory);
  };

  const handleSearch = () => {
    // TODO: Î∞±ÏóîÎìúÏóê Í≤ÄÏÉâ Í∏∞Îä•Ïù¥ Ï∂îÍ∞ÄÎêòÎ©¥, Ïó¨Í∏∞ÏÑú fetchPostsÎ•º Îã§Ïãú Ìò∏Ï∂ú
    setSearchQuery(searchInput);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  // Î°úÎî© ÏÉÅÌÉúÏùº Îïå Ïä§ÏºàÎ†àÌÜ§ UIÎ•º Î≥¥Ïó¨Ï£ºÎäî Ìï®Ïàò
  const renderSkeletonCards = (count = 8) => (
    <LoadingGrid>
      {Array.from({ length: count }, (_, index) => (
        <SkeletonCard key={index}>
          <SkeletonImage />
          <SkeletonText />
          <SkeletonText />
          <SkeletonText />
        </SkeletonCard>
      ))}
    </LoadingGrid>
  );

  // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Î∞õÏïÑÏôÄÏÑú Ï±Ö Ïπ¥ÎìúÎ•º Í∑∏Î¶¨Îäî Ìï®Ïàò
  const renderBookCard = (post) => (
    <BookCard key={post.postId} onClick={() => handleBookClick(post.postId)}>
      <BookImage className="book-image">
        <img src={post.thumbnailUrl} alt={post.postTitle} />
      </BookImage>
      {/* <LikeButton /> */}
      <BookInfo>
        <BookCardTitle>{post.postTitle}</BookCardTitle>
        <BookSeller>{post.sellerNickname}</BookSeller>
        <BookPrice>
          {post.price.toLocaleString()}Ïõê
        </BookPrice>
        {/* TODO: ÏÉÅÏÑ∏ DTOÍ∞Ä ÏïÑÎãàÎØÄÎ°ú, Ìï†Ïù∏Ïú®, Ï±Ö ÏÉÅÌÉú Îì±ÏùÄ ÌëúÏãúÌï† Ïàò ÏóÜÏñ¥. ÌïÑÏöîÌïòÎã§Î©¥ Î™©Î°ù DTOÏóê Ï∂îÍ∞ÄÌï¥Ïïº Ìï¥. */}
      </BookInfo>
    </BookCard>
  );

  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
  const filterBooksBySearch = (books, query) => {
    if (!query.trim()) return books;
    
    const searchTerms = query.toLowerCase().trim().split(' ').filter(term => term.length > 0);
    
    return books.filter(book => {
      const title = book.title.toLowerCase();
      const author = book.author.toLowerCase();
      
      // Î™®Îì† Í≤ÄÏÉâÏñ¥Í∞Ä Ï†úÎ™©Ïù¥ÎÇò Ï†ÄÏûêÏóê Ìè¨Ìï®ÎêòÏñ¥Ïïº Ìï®
      return searchTerms.every(term => 
        title.includes(term) || author.includes(term)
      );
    });
  };

  // ÌïÑÌÑ∞ÎßÅ Î∞è Ï†ïÎ†¨
  const searchFilteredBooks = filterBooksBySearch(MOCK_BOOKS, searchQuery);
  const filteredBooks = searchFilteredBooks.filter(book => {
    const matchesMain = selectedMainCategory === 'Ï†ÑÏ≤¥' || book.category?.main === selectedMainCategory;
    const matchesSub = selectedSubCategory && selectedSubCategory !== '' ? book.category?.sub === selectedSubCategory : true;
    const matchesDetail = selectedDetailCategory && selectedDetailCategory !== '' ? book.category?.detail === selectedDetailCategory : true;
    const matchesLocation = locationFilter === 'Ï†ÑÏ≤¥' || book.location === locationFilter;
    return matchesMain && matchesSub && matchesDetail && matchesLocation;
  });

  const sortedBooks = [...filteredBooks].sort((a, b) => {
    if (sortBy === 'createdAt') {
      return new Date(b.createdAt) - new Date(a.createdAt);
    } else if (sortBy === 'likes') {
      return b.likes - a.likes;
    } else if (sortBy === 'price') {
      return a.price - b.price;
    }
    return 0;
  });

  // ÌïôÍ≥º ÌïÑÌÑ∞ÎßÅ Ìï®Ïàò
  const filterBooksByCategory = (books) => {
    if (selectedMainCategory === 'Ï†ÑÏ≤¥') {
      return books;
    }
    
    return books.filter(book => {
      const matchesMain = book.category?.main === selectedMainCategory;
      const matchesSub = selectedSubCategory && selectedSubCategory !== '' ? book.category?.sub === selectedSubCategory : true;
      const matchesDetail = selectedDetailCategory && selectedDetailCategory !== '' ? book.category?.detail === selectedDetailCategory : true;
      return matchesMain && matchesSub && matchesDetail;
    });
  };

  // ÏµúÍ∑º Îì±Î°ùÎêú Ï±Ö Î¶¨Ïä§Ìä∏ (ÌïôÍ≥º ÌïÑÌÑ∞ Ï†ÅÏö©)
  const recentBooks = [...MOCK_BOOKS].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  const filteredRecentBooks = filterBooksByCategory(recentBooks);
  const displayedRecentBooks = showAllRecentBooks ? filteredRecentBooks : filteredRecentBooks.slice(0, 6);

  // Ïù∏Í∏∞ ÎèÑÏÑú Î¶¨Ïä§Ìä∏ (ÌïôÍ≥º ÌïÑÌÑ∞ Ï†ÅÏö©)
  const filteredPopularBooks = filterBooksByCategory(POPULAR_BOOKS);
  const displayedPopularBooks = showAllPopularBooks ? filteredPopularBooks : filteredPopularBooks.slice(0, 6);

  return (
    <MarketplaceContainer>
      <Header>
        <Title>Ï±ÖÍ±∞ÎûòÍ≤åÏãúÌåê</Title>
      </Header>
      <PageWrapper>
        <SidebarMenu active={activeSubMenu} onMenuClick={handleSubMenuClick} />
        <div style={{ flex: 1, minWidth: 0 }}>
          <Controls>
            <SearchBar>
              <SearchIcon />
              <input
                type="text"
                placeholder="Ï±Ö Ï†úÎ™©Ïù¥ÎÇò Ï†ÄÏûêÎ•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî"
                value={searchInput}
                onChange={(e) => setSearchInput(e.target.value)}
                onKeyPress={handleKeyPress}
              />
              <SearchButton onClick={handleSearch}>
                Í≤ÄÏÉâ
              </SearchButton>
            </SearchBar>
            <div style={{ position: 'relative' }}>
              <FilterButton onClick={() => setFilterOpen(v => !v)}>
                <FilterIcon />
                ÌïÑÌÑ∞
              </FilterButton>
              {filterOpen && (
                <FilterPopover ref={filterRef}>
                  <FilterSection>
                    <FilterLabel>Í±∞Îûò ÏßÄÏó≠</FilterLabel>
                    <FilterRadioGroup>
                      <FilterRadio>
                        <input type="radio" name="location" value="Ï†ÑÏ≤¥" checked={locationFilter === 'Ï†ÑÏ≤¥'} onChange={() => setLocationFilter('Ï†ÑÏ≤¥')} /> Ï†ÑÏ≤¥
                      </FilterRadio>
                      <FilterRadio>
                        <input type="radio" name="location" value="ÍµêÎÇ¥" checked={locationFilter === 'ÍµêÎÇ¥'} onChange={() => setLocationFilter('ÍµêÎÇ¥')} /> ÍµêÎÇ¥
                      </FilterRadio>
                      <FilterRadio>
                        <input type="radio" name="location" value="ÍµêÏô∏" checked={locationFilter === 'ÍµêÏô∏'} onChange={() => setLocationFilter('ÍµêÏô∏')} /> ÍµêÏô∏
                      </FilterRadio>
                    </FilterRadioGroup>
                  </FilterSection>
                  <FilterSection>
                    <FilterLabel>Ï†ïÎ†¨ Í∏∞Ï§Ä</FilterLabel>
                    <FilterSelect value={sortBy} onChange={e => setSortBy(e.target.value)}>
                      <option value="createdAt">ÏµúÏã† Ïàú</option>
                      <option value="likes">Ïù∏Í∏∞ Ïàú</option>
                      <option value="price">ÎÇÆÏùÄ Í∞ÄÍ≤© Ïàú</option>
                      <option value="price">ÏÉÅÌÉú Ïàú</option>

                    </FilterSelect>
                  </FilterSection>
                </FilterPopover>
              )}
            </div>
          </Controls>

          {/* Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù Î∞è Ï†ÅÏö© ÏòÅÏó≠ */}
          <CategoryContainer>
            <CategorySelect value={pendingMainCategory} onChange={handlePendingMajorChange}>
              <option value="Ï†ÑÏ≤¥">Ï†ÑÏ≤¥</option>
              {Object.keys(CATEGORIES).map(mainCategory => (
                <option key={mainCategory} value={mainCategory}>{mainCategory}</option>
              ))}
            </CategorySelect>
            {pendingMainCategory && pendingMainCategory !== 'Ï†ÑÏ≤¥' && (
              <CategorySelect value={pendingSubCategory} onChange={handlePendingSubChange}>
                <option value="">Ï†ÑÏ≤¥</option>
                {Object.keys(CATEGORIES[pendingMainCategory]).map(subCategory => (
                  <option key={subCategory} value={subCategory}>{subCategory}</option>
                ))}
              </CategorySelect>
            )}
            {pendingSubCategory && pendingSubCategory !== '' && CATEGORIES[pendingMainCategory]?.[pendingSubCategory]?.length > 0 && (
              <CategorySelect value={pendingDetailCategory} onChange={handlePendingDetailChange}>
                <option value="">Ï†ÑÏ≤¥</option>
                {CATEGORIES[pendingMainCategory][pendingSubCategory].map(detailCategory => (
                  <option key={detailCategory} value={detailCategory}>{detailCategory}</option>
                ))}
              </CategorySelect>
            )}
            <button style={{marginLeft: '1rem', padding: '0.5rem 1.5rem', borderRadius: '8px', border: 'none', background: 'var(--primary)', color: 'white', fontWeight: 600, fontSize: '1rem', cursor: 'pointer'}} onClick={handleApplyCategory}>Ï†ÅÏö©</button>
          </CategoryContainer>

          {/* Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏûàÏùÑ ÎïåÎäî Í≤ÄÏÉâ Í≤∞Í≥ºÎßå ÌëúÏãú */}
          {searchQuery && (
            <SearchResultsSection>
              <SearchResultsHeader>
                <BackButton onClick={handleBackToMarketplace}>
                  <span className="icon">‚Üê</span>
                  Ï±Ö Í±∞Îûò Í≤åÏãúÌåêÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
                </BackButton>
                <SearchResultsTitle>
                  <span className="search-term">"{searchQuery}"</span> Í≤ÄÏÉâ Í≤∞Í≥º
                  <span className="result-count"> ({sortedBooks.length}Í∞ú)</span>
                </SearchResultsTitle>
              </SearchResultsHeader>
              
              {isLoading ? (
                renderSkeletonCards()
              ) : sortedBooks.length > 0 ? (
                <BookGrid>
                  {sortedBooks.map(renderBookCard)}
                </BookGrid>
              ) : (
                <NoResultsMessage>
                  <div className="icon">üîç</div>
                  <div className="title">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</div>
                  <div className="description">
                    <strong>"{searchQuery}"</strong>Ïóê ÎåÄÌïú Í≤ÄÏÉâ Í≤∞Í≥ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.<br />
                    Îã§Î•∏ ÌÇ§ÏõåÎìúÎ°ú Í≤ÄÏÉâÌïòÍ±∞ÎÇò Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Î≥ÄÍ≤ΩÌï¥Î≥¥ÏÑ∏Ïöî.
                  </div>
                </NoResultsMessage>
              )}
            </SearchResultsSection>
          )}

          {/* Í≤ÄÏÉâ Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå Ïù∏Í∏∞ ÎèÑÏÑúÏôÄ ÏµúÍ∑º Îì±Î°ùÎêú Ï±Ö ÌëúÏãú */}
          {!searchQuery && (
            <>
              {/* Ïù∏Í∏∞ ÎèÑÏÑú Î¶¨Ïä§Ìä∏ */}
              <SectionContainer>
                <SectionHeader>
                  <PopularSectionTitle>
                    {selectedMainCategory === 'Ï†ÑÏ≤¥' ? (
                      'Ïù∏Í∏∞ ÎèÑÏÑú'
                    ) : (
                      <>
                        <span style={{ color: 'var(--primary)', fontWeight: '700' }}>
                          {selectedDetailCategory || selectedSubCategory || selectedMainCategory}
                        </span>
                        {' '}Ïù∏Í∏∞ ÎèÑÏÑú
                      </>
                    )}
                  </PopularSectionTitle>
                </SectionHeader>
                <PopularBooksGrid>
                  {displayedPopularBooks.map(renderBookCard)}
                </PopularBooksGrid>
                <div style={{ textAlign: 'center', marginTop: '2rem', marginBottom: '3rem' }}>
                  <ViewMoreButton onClick={() => setShowAllPopularBooks(prev => !prev)}>
                    {showAllPopularBooks ? 'ÎçîÎ≥¥Í∏∞ Ï∑®ÏÜå' : 'ÎçîÎ≥¥Í∏∞'}
                  </ViewMoreButton>
                </div>
              </SectionContainer>

              {/* ÏµúÍ∑º Îì±Î°ùÎêú Ï±Ö Î¶¨Ïä§Ìä∏ */}
              <SectionContainer>
                <SectionHeader>
                  <SectionTitle>
                    {selectedMainCategory === 'Ï†ÑÏ≤¥' ? (
                      'ÏµúÍ∑º Îì±Î°ùÎêú Ï±Ö'
                    ) : (
                      <>
                        <span style={{ color: 'var(--primary)', fontWeight: '700' }}>
                          {selectedDetailCategory || selectedSubCategory || selectedMainCategory}
                        </span>
                        {' '}ÏµúÍ∑º Îì±Î°ùÎêú Ï±Ö
                      </>
                    )}
                  </SectionTitle>
                </SectionHeader>
                <BookGrid>
                  {displayedRecentBooks.map(renderBookCard)}
                </BookGrid>
                <div style={{ textAlign: 'center', marginTop: '2rem', marginBottom: '3rem' }}>
                  <ViewMoreButton onClick={() => setShowAllRecentBooks(prev => !prev)}>
                    {showAllRecentBooks ? 'ÎçîÎ≥¥Í∏∞ Ï∑®ÏÜå' : 'ÎçîÎ≥¥Í∏∞'}
                  </ViewMoreButton>
                </div>
              </SectionContainer>
            </>
          )}
        </div>
      </PageWrapper>
    </MarketplaceContainer>
  );
};

export default Marketplace; 