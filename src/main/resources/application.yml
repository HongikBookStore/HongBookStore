spring:
  application:
    name: HongBookStore
  config:
    import: optional:file:.env[.properties]
  profiles:
    active: prod
  jackson:
    time-zone: Asia/Seoul

  ### JavaMailSender ###
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true # SMTP 서버에 로그인할 때 인증을 사용할지를 결정
          starttls:
            enable: true # TLS를 사용할지를 결정
      debug: true # 디버그 모드 활성화 (선택 사항)

  ### OAuth ###
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID} # 발급 받은 Client ID
            client-secret: ${GOOGLE_CLIENT_SECRET} # 발급 받은 Client Secret
            scope: # 기본값 openid, profile, email => profile, email로 설정 변경
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/google"

          naver:
            client-id: ${NAVER_CLIENT_ID} # 발급 받은 Client ID
            client-secret: ${NAVER_CLIENT_SECRET} # 발급 받은 Client Secret
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            scope:
              - name
              - email
              - profile_image
            client-name: Naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 발급 받은 Client ID
            client-secret: ${KAKAO_CLIENT_SECRET} # 발급 받은 Client Secret
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope: # https://developers.kakao.com/docs/latest/ko/kakaologin/common#user-info
              - profile_nickname
              - profile_image
              - account_email
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            client-name: Kakao

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-info-authentication-method: header
            user-name-attribute: response # Naver 응답 값 resultCode, message, response 중 response 지정

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header
            user-name-attribute: id # Kakao 응답 값 id, connected_at, properties, kakao_account 중 id 지정

  ### MySQL DB ###
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST:104.198.2.213}:${MYSQL_PORT:3306}/${MYSQL_DB:hongBookstore}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}

  ### Redis DB ###
  data:
    redis:
      host: ${REDIS_HOST:104.198.2.213}
      port: ${REDIS_PORT:6379}

  ### JPA ###
  jpa:
    hibernate:
      ddl-auto: update
    open-in-view: false
    properties:
      hibernate:
        format_sql: true # SQL 로그를 예쁘게 포맷팅
      show-sql: true # 실행되는 SQL 쿼리를 로그로 보여줌

  ### GCP Cloud Storage ###
  cloud:
    gcp:
      project-id: ${GCP_PROJECT_ID}  # .env 파일의 GCP_PROJECT_ID 값을 사용합니다.
      storage:
        bucket-name: ${GCP_BUCKET_NAME} # .env 파일의 GCP_BUCKET_NAME 값을 사용합니다.
      credentials:
        # 운영(GCE/Cloud Run 등)에서는 ADC(Application Default Credentials)를 권장합니다.
        # 비워두면 기본 자격증명을 사용하고, 필요 시 classpath: 또는 파일 경로로 지정하세요.
        location: ${GCP_CREDENTIALS_LOCATION:}
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB # 단일 파일 최대 크기
      # 여러 장 업로드 시 총합이 10MB를 넘어서 실패하는 이슈 대응
      max-request-size: 30MB

### Email From ###
email:
  brand:
    name: HongBookStore
    primary-color: "#2563eb"
    # logo-url: https://your.cdn/logo.png
  verification:
    expiration-hours: 24 # 메일 본문 표기용 (만료 로직은 별도 구현 필요)

### JWT ###
jwt:
  secret: ${JWT_SECRET_KEY} # JWT 토큰을 서명할 때 사용할 시크릿 키, base64 이용해 랜덤 생성함
  token-validity-in-seconds: 3600 # 토큰 유효 기간
  refresh-token-validity-in-seconds: 86400 # 리프레시 토큰 유효 기간

### Kakao Book ###
kakao:
  api:
    book:
      url: https://dapi.kakao.com/v3/search/book
      rest-api-key: ${KAKAO_API_REST_KEY}

### Log ###
logging:
  level:
    root: info
    org:
        springframework:
            security: debug
    hibernate:
    sql: debug
    type:
        descriptor:
        sql: trace

### Swagger ###
springdoc:
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  api-docs:
    groups:
      enabled: true
  swagger-ui:
    operations-sorter: alpha # alpha(알파벳 오름차순), method(HTTP 메소드순)
    tags-sorter: alpha # 태그 정렬 기준
    path: /swagger-ui.html # html 문서 접속 경로
    disable-swagger-default-url: true
    doc-expansion: none # tag, operation 펼치는 방식
  paths-to-match:
    - /**

### Forwarded headers (behind Load Balancer) ###
server:
  forward-headers-strategy: framework

### CORS (환경변수로 제어) ###
app:
  cors:
    # 쉼표로 구분된 오리진 목록. 운영에서 Vercel/도메인으로 교체하세요.
    allowed-origins: ${ALLOWED_ORIGINS:http://localhost:5173,http://localhost:5174,http://localhost:5175}

### Naver Map ###
naver:
  place:
    api:
      key:
        id: ${NAVER_SEARCH_ID}
      secret: ${NAVER_SEARCH_SECRET}
  api:
    client-id: ${NAVER_ROUTE_ID}
    client-secret: ${NAVER_ROUTE_SECRET}

### KMA ###
weather:
  kma:
    base-url: "https://apihub.kma.go.kr"
    auth-key: ${KMA_APIHUB_KEY}   # .env에 KMA_APIHUB_KEY=실제키
    path:
      vilage: "/api/typ01/openApi/VilageFcstInfoService_2.0/getVilageFcst"  # 네 계정 대시보드 경로로 교체
      midland-url: "/api/typ01/url/fct_afs_wl.php"                           # 지금 성공한 URL(전문) 엔드포인트

### Toxic Filter ###
moderation:
  toxic-filter:
    enabled: true
    base-url: https://toxic-filter-534256318130.us-west1.run.app
    # api-key: ${TOXIC_FILTER_API_KEY:}  # toxic-filter 서버에 API_KEY가 설정된 경우
    # blockLevel: CERTAIN    # NONE | CERTAIN | AMBIGUOUS
  policy:
    salePost:
      title: BLOCK    # BLOCK | WARN | OFF
      content: WARN   # 판매글 본문은 기본 허용+경고
    wanted:
      title: BLOCK
      content: WARN   # 구해요 본문: 허용+경고(완만)
    comment:
      content: WARN    # 댓글도 허용+경고로 완화
    placeReview:
      content: BLOCK
    peerReview:
      ratingKeywords: BLOCK
    chat:
      message: BLOCK
